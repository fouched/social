basePath: /v1
definitions:
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  repo.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/repo.User'
      user_id:
        type: integer
    type: object
  repo.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/repo.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/repo.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  repo.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GopherSocial
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GopherSocial API
paths:
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Health endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Health endpoint
      tags:
      - ops
  /posts/:
    post:
      consumes:
      - application/json
      description: Creates a post
      parameters:
      - description: Title
        in: query
        name: title
        required: true
        type: string
      - description: Content
        in: query
        name: content
        required: true
        type: string
      - description: Tags (comma separated)
        in: query
        name: tags
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not found
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/repo.Post'
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Post'
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Updates a post by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Title
        in: query
        name: title
        required: true
        type: string
      - description: Content
        in: query
        name: content
        required: true
        type: string
      - description: Tags (comma separated)
        in: query
        name: tags
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - posts
  /posts/{id}/comment:
    post:
      consumes:
      - application/json
      description: Creates a post comment
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Commenting User ID
        in: query
        name: userID
        required: true
        type: string
      - description: Comment
        in: query
        name: content
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Comment'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post comment
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not found
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{userId}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user by ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - users
  /users/{userId}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollows a user by ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Unfollow user
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollows a user
      tags:
      - users
  /users/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activates a user
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not found
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches a user feed
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Tag to search
        in: query
        name: tag
        type: string
      - description: Search string
        in: query
        name: search
        type: string
      - description: Start date
        in: query
        name: since
        type: string
      - description: End date
        in: query
        name: until
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo.Post'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user feed
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
